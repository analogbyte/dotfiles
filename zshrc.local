# basic stuff
setopt vi
bindkey '\e.' insert-last-word # make alt+dot work in vim mode
setopt inc_append_history
setopt share_history
setopt extended_history

# always fallback to completion from --help
zstyle ':completion:::::' completer _expand _force_rehash _complete _ignored _gnu_generic _approximate

# make username red
# zstyle ':prompt:grml:*:items:user' pre '%B%F{red}';zstyle ':prompt:grml:*:items:user' post '%b%f'

# virtualenv home
export WORKON_HOME=~/.envs

# make nvim use true colors
export NVIM_TUI_ENABLE_TRUE_COLOR=1
export NVIM_TUI_ENABLE_CURSOR_SHAPE=1

# debian specifics
if which apt-get 2>&1 >/dev/null; then
    if [ -e "/usr/local/bin/virtualenvwrapper.sh" ]; then
        source /usr/local/bin/virtualenvwrapper.sh
    fi
    if [ -e "/etc/bash_completion.d/virtualenvwrapper" ]; then
        source /etc/bash_completion.d/virtualenvwrapper
    fi
    unalias ag
    salias agu="apt-get upgrade"
fi

# arch specifics
if which pacman 2>&1 >/dev/null; then
    if [ -e "/usr/bin/virtualenvwrapper.sh" ]; then
        source /usr/bin/virtualenvwrapper.sh
    fi
fi

# run only on X
if [[ $TERM == xterm-termite ]]; then
    # make termites <C-S-t> work
    . /etc/profile.d/vte.sh
    __vte_osc7

    # start gpg agent
    export GPG_TTY=$(tty)
    gpg-connect-agent /bye
fi


# use the vi navigation keys (hjkl) besides cursor keys in menu completion
bindkey -M menuselect 'h' vi-backward-char        # left
bindkey -M menuselect 'k' vi-up-line-or-history   # up
bindkey -M menuselect 'l' vi-forward-char         # right
bindkey -M menuselect 'j' vi-down-line-or-history # bottom

# just type '...' to get '../..'
rationalise-dot() {
    local MATCH
    if [[ $LBUFFER =~ '(^|/| |     |'$'\n''|\||;|&)\.\.$' ]]; then
        LBUFFER+=/
        zle self-insert
        zle self-insert
    else
        zle self-insert
    fi
}
zle -N rationalise-dot
bindkey . rationalise-dot

# without this, typing a . aborts incremental history search
bindkey -M isearch . self-insert

# shorter man page lines
export MANWIDTH=${MANWIDTH:-80}

# ssh/mosh wrapper that rename current tmux window to the hostname of the
# remote host
# if [ -n $TMUX ]; then
#     ssh() {
#         if [[ -n "$TMUX" && $(tmux display-message -p '#W') = "local" ]]; then
#             trap "true" INT PIPE EXIT
#             tmux rename-window "$(echo "${@: -1}" | cut -d '@' -f 2)"
#             command ssh "$@"
#             tmux rename-window -t:"$(echo "${@: -1}" | cut -d '@' -f 2)" 'local'
#             trap - INT PIPE EXIT
#         else
#             command ssh "$@"
#         fi
#     }
#     mosh() {
#         if [[ -n "$TMUX" && $(tmux display-message -p '#W') = "local" ]]; then
#             trap "true" INT PIPE EXIT
#             tmux rename-window "$(echo "${@: -1}" | cut -d '@' -f 2)"
#             command mosh "$@"
#             tmux rename-window -t:"$(echo "${@: -1}" | cut -d '@' -f 2)" 'local'
#             trap - INT PIPE EXIT
#         else
#             command mosh "$@"
#         fi
#     }
# fi


# use gpg-agent as ssh agent
# unset SSH_AGENT_PID
# if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
#     export SSH_AUTH_SOCK="${HOME}/.gnupg/S.gpg-agent.ssh"
# fi

# configure dirstack
DIRSTACKFILE="$HOME/.zdirs"
if [[ -f $DIRSTACKFILE ]] && [[ $#dirstack -eq 0 ]]; then
    dirstack=( ${(f)"$(< $DIRSTACKFILE)"} )
    [[ -d $dirstack[1] ]] && cd $dirstack[1]
fi

chpwd() {
    print -l $PWD ${(u)dirstack} >$DIRSTACKFILE
}

DIRSTACKSIZE=20

setopt autopushd pushdsilent pushdtohome
setopt pushdignoredups
setopt pushdminus

# global aliases
alias -g L=' | less'
alias -g G=' | grep'
alias -g A=' | ag'
alias -g V=' | vim -'

# convenience
alias ds='dirs -v' # show dirstack
alias ssh='TERM=xterm-256color ssh'
alias startx="startx -- -dpi 96"
alias t=task
alias tmuxlink="tmux link-window -k -s base:1 -t 1"
alias fuck='sudo $(fc -ln -1)'

# alias remind="notify-send -u CRITICAL 'Command finished:' '$(fc -ln -1)'"
alias LESS=R # for ag: --pager=less has color
alias vim=nvim
